package com.example.moviebrowser.diimport com.example.moviebrowser.dataSource.MoviesDataSourceimport com.example.moviebrowser.dataSource.remote.RemoteDataSourceimport com.example.moviebrowser.dataSource.remote.RestApiimport com.example.moviebrowser.repository.DefaultMovieRepositoryimport com.example.moviebrowser.repository.MovieRepositoryimport com.jakewharton.retrofit2.adapter.kotlin.coroutines.CoroutineCallAdapterFactoryimport com.squareup.moshi.Moshiimport com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactoryimport dagger.Moduleimport dagger.Providesimport dagger.hilt.InstallInimport dagger.hilt.components.SingletonComponentimport retrofit2.Retrofitimport retrofit2.converter.moshi.MoshiConverterFactoryimport javax.inject.Qualifierimport javax.inject.Singleton@Module@InstallIn(SingletonComponent::class)object MovieModule {    private const val BaseURL = "https://api.themoviedb.org/3/movie/"    @Singleton    @Provides    fun providesMoshi(): Moshi = Moshi.Builder()        .add(KotlinJsonAdapterFactory())        .build()    @Singleton    @Provides    fun providesRetrofit(moshi: Moshi): Retrofit = Retrofit.Builder()        .addCallAdapterFactory(CoroutineCallAdapterFactory())        .baseUrl(BaseURL)        .addConverterFactory(MoshiConverterFactory.create(moshi))        .build()    @Singleton    @Provides    fun provideApiService(retrofit: Retrofit): RestApi = retrofit.create(RestApi::class.java)    @Singleton    @Provides    fun provideDataSource(restApi: RestApi):MoviesDataSource=RemoteDataSource(restApi)    @Singleton    @Provides    fun provideRepository(remoteDataSource: RemoteDataSource): MovieRepository =  DefaultMovieRepository(remoteDataSource)}@Qualifier@Retention(AnnotationRetention.BINARY)annotation class Impl1@Qualifier@Retention(AnnotationRetention.BINARY)annotation class Impl2