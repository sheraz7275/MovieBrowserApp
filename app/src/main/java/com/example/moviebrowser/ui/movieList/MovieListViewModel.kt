package com.example.moviebrowser.ui.movieListimport android.util.Logimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.moviebrowser.dataModels.TopRatedMoviesimport com.example.moviebrowser.repository.MovieRepositoryimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.flow.MutableSharedFlowimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.asStateFlowimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass MovieListViewModel @Inject constructor(private val repository: MovieRepository) :    ViewModel() {    // Encapsulation of data with stat flow    private val _topRatedMoviesList = repository.moviesList    val topRatedMoviesList=_topRatedMoviesList.asStateFlow()    private var topRatedMoviesUnmodified = mutableListOf<TopRatedMovies>()    val status = repository.status    init {        apiCall()    }    // function responsible for API call    private fun apiCall() {        viewModelScope.launch {            repository.getTopRatedMovies()            setData()        }    }    // setting data upon receiving    private suspend fun setData() {        if (_topRatedMoviesList.value.isNullOrEmpty()){            return        }        topRatedMoviesUnmodified = _topRatedMoviesList.value as MutableList<TopRatedMovies>    }    // filtration of data on search query    fun filterList(searchQuery: String?) {        val processingList = topRatedMoviesUnmodified        var resultList = mutableListOf<TopRatedMovies>()        if (searchQuery != null) {            if (searchQuery.isNotEmpty()) {                for (movie in processingList) {                    if (movie.title?.lowercase()?.contains(searchQuery.lowercase()) == true) {                        resultList.add(movie)                        submitFilterData(resultList)                    } else {                        submitFilterData(resultList)                    }                }            } else {                resultList.clear()                resultList = topRatedMoviesUnmodified                submitFilterData(resultList)            }        }    }    private fun submitFilterData(finalData: MutableList<TopRatedMovies>) {        _topRatedMoviesList.value = finalData    }}